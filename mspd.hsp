#include "hsp3dish.as"
#include "mspd.as"

title "munet spider"

;-------------------------------------------------------------------------------
;
; 最初期設定
;
;-------------------------------------------------------------------------------

*first

getreq int_os, SYSREQ_PLATFORM           ; OS識別
flag_is_ios     = (int_os = 1)
flag_is_android = (int_os = 2)
flag_is_windows = (int_os = 0)

; フォント画像のロード（半角）
celload "fon_cha1.png", 2
celdiv 2, g_font_png_x, g_font_png_y, 0, 0

; フォント画像のロード（全角）
celload "fon_cha2.png", 3
celdiv 3, 2*g_font_png_x, g_font_png_y, 0, 0

; カード画像のロード
celload "fon_suit.png", 4
celdiv 4, g_font_suit_x, g_font_suit_y, 0, 0

int_mousex = 0
int_mousey = 0
randomize                                ; 乱数初期化

str_titl1="Munet Spider｡"

sdim arr_strdif, 40, 4
arr_strdif(0) = "Lv1 ｣x8"
arr_strdif(1) = "Lv2 ｣､x4"
arr_strdif(2) = "Lv3 ｣､x3,･x2"
arr_strdif(3) = "Lv4 ｣､･ｦx2"

sdim arr_strsuit, 4, 4
arr_strsuit(0) = "｣"
arr_strsuit(1) = "､"
arr_strsuit(2) = "･"
arr_strsuit(3) = "ｦ"

; 拡大率の設定
float_zoom = double( 0.1 * g_screen_x / g_font_suit_x )

; 難易度の設定
int_difficulty = 0

; 画面領域の大きさ（縦）
int_screen_y = g_screen_y - ((1 + global_trace_row) * g_font_y)
int_score = -1

;-------------------------------------------------------------------------------
;
; タイトル
;
;-------------------------------------------------------------------------------

*titl

repeat

	redraw 0
	gfilter 1

	stick key, 15
	;if ( key & 128 ) :end

	if ( key & 256 ) {
		int_mousex = mousex
		int_mousey = mousey
		int_difficulty = 0

		; 難易度が選ばれているならゲーム開始
		if (((2*g_font_x) < int_mousex ) & ( int_mousex < (g_screen_x - (5*g_font_x)))) {
			for n, 0, 4, 1
				j = ( 4*n + 2 ) * g_font_y
				k = ( 4*n + 5 ) * g_font_y
				if ((j < int_mousey ) & ( int_mousey < k)) {
					int_difficulty = n+1
					_break
				}
			next
		}
		if ( int_difficulty > 0 ) :break

		; 終了させる iOSを除く
		if (((2*g_screen_x/3) < int_mousex ) & (( g_screen_y - g_font_y ) < int_mousey ) & ( flag_is_ios ^ 1 )) {
			end 0
		}
	}

	color 17, 51, 17
	boxf 0, 0, g_screen_x, g_screen_y

	pos g_font_x, g_font_y/2
	fprint str_titl1, 255

	; 難易度選択の表示
	for n, 0, 4, 1
		i = 2 * g_font_x
		j = ( 4*n + 2 ) * g_font_y
		k = 5 * g_font_x
		color 255, 255, 255
		boxf i, j, g_screen_x - k, j + ( 3 * g_font_y )
		switch n
			case 0 :color 0, 0, 102 :swbreak
			case 1 :color 204, 0, 0 :swbreak
			case 2 :color 136, 119, 0 :swbreak
			case 3 :color 0, 102, 34 :swbreak
		swend
		boxf i+1, j+1, g_screen_x - k-1, j-1 + ( 3 * g_font_y )
		i += g_font_x
		j = ( 4*n + 3 ) * g_font_y
		pos i, j
		fprint arr_strdif(n), 255
	next

	; スコアの表示（クリア・敗北時）
	if ( int_score >= 0 ) {
		pos 0, g_screen_y - g_font_y
		fprint "Score:", 153
		pos ((10 - log10(int_score)) * g_font_x), g_screen_y - g_font_y
		fprint "" + int_score, 153
		; 残り場数
		for i, 0, 5, 1
			pos g_screen_x - ( 2 * g_font_x ), g_screen_y - ( g_font_y * ( 6-i ) )
			if ( i < int_spider ) :fprint "｢", 153 :else :fprint "｡", 153
		next
		; 完成したスートの表示
		for i, 0, 8, 1
			pos g_screen_x - ( 4 * g_font_x ), g_screen_y - ( g_font_y * ( i+2 ) )
			fprint arr_finished(i), 153
		next
	}

	; ステータスバー
	color 85, 85, 102
	boxf 0, g_screen_y - g_font_y, g_screen_x, g_screen_y
	gmode 5, 0, 0, 204

	color 255, 255, 255
	pos (g_screen_x/3) - (7*g_font_x) , g_screen_y - g_font_y
	fprint "2012(C) m-ushi", 255

	if ( flag_is_ios^1 ) {
		pos (5*g_screen_x/6) - (2*g_font_x), g_screen_y - g_font_y
		fprint "Exit", 255
		line 2*g_screen_x/3, g_screen_y - g_font_y, 2*g_screen_x/3, g_screen_y
	}
	line 0, g_screen_y - g_font_y, g_screen_x, g_screen_y - g_font_y

	gmode 0

	redraw 1
	await 32

loop

;-------------------------------------------------------------------------------
;
; ゲーム初期設定
;
;-------------------------------------------------------------------------------

*init

; 初期配置 6x4, 5x6 =  54枚
; 配られる 5x10     =  50枚
; 全部で 54 + 50    = 104枚

; 格納データ a & 15 -> 数字   (1〜13)
;            a >> 4 -> スート (1〜 8)

; 配列の初期化
dim arr_card, 10, 104    ; 手札
dim arr_standby, 5, 10   ; 積まれたカード
dim arr_turnup, 10       ; どこまで開けているか
dim arr_turnup_found, 10 ; どこまで調べたか
dim arr_hint, 2, 10, 10  ; ヒント格納配列

; カードを配布する
gosub *sub_shuffle

; 描画xy座標
int_locate_x = 0
int_locate_y = 0

; 移動セル格納変数
int_move_x = -1
int_move_y = -1

; カードを配った回数
int_spider = 0
; フリーセル存在するか否か
exist_freecell = 0
; スコア
int_score = 500
; 完成したスート
sdim arr_finished, 4, 8
; 戻るの初期化
back_init
; カードを動かしたか（再シャッフル可能か？）
int_ismoved = 0

; 初期ヒントの作成
gosub *sub_make_hint

; トレースログ
if ( global_trace_row > 0 ) {
	sdim arr_strtrace, 64, global_trace_row
}
str_trace_put = ""

;-------------------------------------------------------------------------------
;
; ゲーム
;
;-------------------------------------------------------------------------------

*play

repeat

	redraw 0
	gfilter 1

	int_mousex_before = int_mousex
	int_mousey_before = int_mousey
	int_mousex = mousex
	int_mousey = mousey

	stick key, 15
	if ( key & 128 ) {
		;
	}

	; フリーセル存在チェック
	exist_freecell = 0
	for i, 0, 10, 1
		j = -1 :do :j++ :until ( arr_card(i, j) = 0 )
		if ( j = 0 ) :exist_freecell = 1
	next

	; クリックセル移動
	if ( key & 256 ) {
		if ( int_mousey < ( g_screen_y - g_font_y )) {
			; クリックセル移動
			i = int( 1.0 * (int_mousex - int_locate_x) / float_zoom / g_font_suit_x )
			j = int( 1.0 * (int_mousey - int_locate_y) / float_zoom / g_font_suit_y )
			if ( 0 <= i ) & ( i < 10 ) & ( 0 <= j ) & ( j < 104 ) {
				if (( arr_turnup(i) < j ) & ( arr_card(i,j) > 0 )) | ( int_move_x >= 0 ) {
					if ( int_move_x >= 0 ) {
						if ( i != int_move_x ) {
							j = get_rows(arr_card, i)-1
							if ( j < 0 ) :j = 0
							a = arr_card(int_move_x, int_move_y) & 15
							b = (arr_card(i, j)&15)-1
							c = arr_card(i, j+1)
							if (( a = b ) & ( c = 0 )) | (( j = 0 ) & ( arr_card(i, j) = 0 )) {
								; セル移動完了
								l = j
								if (( j = 0 ) & ( arr_card(i, j) = 0 )) :l-- :else :j++
								for k, int_move_y, 104, 1
									l++
									arr_card(i, l) = arr_card(int_move_x, k)
									arr_card(int_move_x, k) = 0
									if ( arr_card(int_move_x, k+1) = 0 ) :_break
								next
								int_ismoved = 1
 								int_score-- :if ( int_score < 0 ) :int_score = 0

								; 操作情報をスタックに
								str_trace_put = "Move (" + i + "," + j + ")<-(" + int_move_x + "," + int_move_y + ")"
								gosub *sub_trace_put
								back_push i, j, int_move_x, int_move_y, arr_turnup(int_move_x)

								; 完成チェック
								gosub *sub_chk_complete

								; 一枚開ける
								if ( arr_turnup(int_move_x) = (int_move_y-1) ) {
									if ( arr_turnup(int_move_x) >= 0 ) {
										arr_turnup(int_move_x)--
										if (arr_turnup_found(int_move_x) >= arr_turnup(int_move_x)) : arr_turnup_found(int_move_x) = arr_turnup(int_move_x)
									}
								}

								; ヒントの再作成
								gosub *sub_make_hint
							}
						}
						gosub *sub_init_click_info
					} else {
						if ( int_move_x < 0 ) {
							; セルつまみ可能判定
							m = 0
							for k, j, 104, 1
								if ( arr_card(i, k+1) = 0 ) {
									_break
								}
								a = is_right_order( arr_card, i, k+1, -1, int_difficulty )
								if ( a = 0 ) {
									m = 1
									_break
								}
							next

							if ( m = 0 ) & ( arr_card(i,j) > 0 ) {
								; セルをつまむ
								int_move_x = i
								int_move_y = j
								int_hint_from_x = -1
								int_hint_from_y = -1
								int_hint_to_x   = -1
							} else {
								gosub *sub_init_click_info
							}
						}
					}
				} else {
					gosub *sub_init_click_info
				}
			} else {
				gosub *sub_init_click_info
			}
		} else {
			; ステータスバーみたいな領域
			if ( int_mousex >= ( g_screen_x / 12 )) & ( int_mousex < ( 11 * g_screen_x / 12 )) & ( int_move_x < 0 ) {
				if ( int_mousex < ( 13 * g_screen_x / 36 )) {
					if ( int_ismoved ) {
						; 戻る
						a = back_pop()
						if ( a >= 0 ) {
							i = a >> 27
							j = ( a >> 20 ) & 127
							int_move_x = ( a >> 16 ) & 15
							int_move_y = ( a >> 8 ) & 255
							int_turnup = a & 255
							if ( int_turnup > 104 ) { int_turnup = -1 }
		
							str_trace_put = "Back (" + int_move_x + "," + int_move_y + ")<-(" + i + "," + j + ") @ " + int_turnup
							gosub *sub_trace_put
							while ( arr_card(i, j) > 0 )
								arr_card(int_move_x, int_move_y) = arr_card(i, j)
								arr_card(i, j) = 0
								int_move_y++ :j++
							wend
							arr_turnup(int_move_x) = int_turnup

							int_score-- :if ( int_score < 0 ) :int_score = 0

							; ヒントの再作成
							gosub *sub_make_hint
						}
					} else {
						; カードの再配布
						gosub *sub_shuffle
						gosub *sub_make_hint
						gosub *sub_init_click_info
					}
					gosub *sub_init_click_info
				} else {
					if ( ( int_mousex >= ( 23 * g_screen_x / 36 )) ) {
						; カード配布
						if ( int_spider = 5 ) :break
						if ( exist_freecell = 0 ) {
							for i, 0, 10, 1
								j = -1 :do :j++ :until ( arr_card(i, j) = 0 )
								arr_card(i, j) = arr_standby( int_spider, i )
	
								; 完成チェック
								gosub *sub_chk_complete
	
							next
							int_spider++
							int_ismoved = 1
							str_trace_put = "Deal" :gosub *sub_trace_put
							; 戻るの初期化
							back_init
							; ヒントの再作成
							gosub *sub_make_hint
							gosub *sub_init_click_info
						}
					} else {
						; ヒント
						gosub *sub_init_click_info
						if ( int_hint_length > 0 ) {
							i = int_hint_p
							while
								j = ( i / 10 ) \ 10 :k = i \ 10 :l = i / 100
								if ( arr_hint( l, j, k ) > 0 ) {
									str_trace_put = "Hint (" + j + ", " + arr_hint(l, j, k) + ")->" + k
									gosub *sub_trace_put
									int_hint_from_x = j
									int_hint_from_y = arr_hint(l, j, k) - 1
									int_hint_to_x   = k
									int_hint_to_y   = get_rows( arr_card, int_hint_to_x ) - 1
									int_hint_priority = l
									int_hint_p = i + 1
									_break
								}
								i++ :if ( i > 199 ) :i = 0
							wend
						}
					}
				}
			}
		}
	}

	; 最大行数の取得
	int_max_y = 0
	for i, 0, 10, 1
		j = get_rows( arr_card, i )
		if ( int_max_y < j ) :int_max_y = j
	next

 	; 左右移動・拡縮
 	stick gky, 256
 	if ( gky & 256 ) {
		a = int_mousex_before - int_mousex
		if ( abs(a) > 3 ) {
			int_locate_x -= a
		}
		a = int_mousey_before - int_mousey
		if ( abs(a) > 3 ) {
			int_locate_y -= a
		}

		if ( int_mousey >= ( g_screen_y - g_font_y )) {
			if ( int_mousex < ( g_screen_x / 12 )) {
				; 縮小
				float_zoom -= double(2)/100.0
				b = double( 0.075 * g_screen_x / g_font_suit_x )
				if float_zoom < b {
					float_zoom = b
				} else {
					int_locate_x += g_screen_x/80
					int_locate_y += g_screen_y/80
				}
			} else {
				if ( int_mousex >= ( 11 * g_screen_x / 12 )) {
					; 拡大
					float_zoom += double(2)/100.0
					b = double( 0.2 * g_screen_x / g_font_suit_x )
					if float_zoom > b {
						float_zoom = b
					} else {
						int_locate_x -= g_screen_x/80
						int_locate_y -= g_screen_y/80
					}
				} else {
					if ( int_move_x >= 0 ) {
						; カードをつかんでいるときの移動
						int_scroll_weight++ :if ( int_scroll_weight > 40 ) :int_scroll_weight = 40
						i = ( int_mousex - ( g_screen_x / 12 ) ) * 24 / ( 5 * g_screen_x )

						c = int(10.0 * g_font_suit_x * float_zoom)
						if ( c > g_screen_x ) :b =  1 :else :b = -1
						c = int(1.0 * int_max_y * g_font_suit_y * float_zoom)
						if ( c > int_screen_y ) :d = -1 :else :d = 1

						switch i
						case 0
							int_locate_x += int_scroll_weight * b
							swbreak
						case 1
							int_locate_y += int_scroll_weight * d
							swbreak
						case 2
							int_locate_y -= int_scroll_weight * d
							swbreak
						case 3
							int_locate_x -= int_scroll_weight * b
							swbreak
						swend
					}
				}
			}
		}
	} else {
		int_scroll_weight = 8
	}

	; 画面位置調整
	b = int(10.0 * g_font_suit_x * float_zoom)
	if ( b < g_screen_x ) {
		if ( int_locate_x < 0 ) :int_locate_x = 0
		if (( b + int_locate_x ) > g_screen_x ) :int_locate_x = g_screen_x - b
	} else {
		if ( int_locate_x > 0 ) :int_locate_x = 0
		if (( b + int_locate_x ) < g_screen_x ) :int_locate_x = g_screen_x - b
	}
	c = int(1.0 * int_max_y * g_font_suit_y * float_zoom)
	if ( c > int_screen_y ) {
		if ( int_locate_y > 0 ) :int_locate_y = 0
		if (( c + int_locate_y ) < int_screen_y ) :int_locate_y = int_screen_y - c
	} else {
		if ( int_locate_y < 0 ) :int_locate_y = 0
		if (( c + int_locate_y ) > int_screen_y ) :int_locate_y = int_screen_y - c
	}

	; 画面遷移制御
	if ( int_max_y = 0 ) :break

	; 疑似背景・外
	color 0, 51, 0
	if ( global_trace_row > 0 ) {
		a = 0
		for i, 0, 10, 1
			a += get_rows( arr_card, i )
		next
		a += (5-int_spider)*10
		if (( a\13 ) > 0 ) :color 255,0,0
	}

	; 疑似背景・中
	boxf 0, 0, g_screen_x, g_screen_y
	a = int_locate_x
	b = int(10.0 * g_font_suit_x * float_zoom) + int_locate_x
	c = int_locate_y
	d = int(1.0 * int_max_y * g_font_suit_y * float_zoom ) + int_locate_y
	color 102, 153, 102
	boxf a, c, b, d
	color 0, 0, 0

	; スコア
	pos 0, int_screen_y - g_font_y
	fprint "Score:", 153
	pos ((10 - log10(int_score)) * g_font_x), int_screen_y - g_font_y
	fprint "" + int_score, 153
	; 残り場数
	for i, 0, 5, 1
		pos g_screen_x - ( 2 * g_font_x ), int_screen_y - ( g_font_y * ( 5-i ) )
		if ( i < int_spider ) :fprint "｢", 153 :else :fprint "｡", 153
	next
	; 完成したスートの表示
	for i, 0, 8, 1
		pos g_screen_x - ( 4 * g_font_x ), int_screen_y - ( g_font_y * ( i+1 ) )
		fprint arr_finished(i), 153
	next
	gmode 0

	; 場の表示
	for i, 0, 10, 1
		j = 0
		do
			; 情報取得
			if ( arr_card(i, j) > 0 ) {
				int_suit = get_suit( arr_card(i, j), int_difficulty )
				int_number = get_number( arr_card(i, j) )

				; 絵を書く
				int_x = int(1.0 * i * g_font_suit_x * float_zoom)
				int_y = int(1.0 * j * g_font_suit_y * float_zoom)
				int_x_plus = int(1.0 * g_font_suit_x * float_zoom)
				int_y_plus = int(1.0 * g_font_suit_y * float_zoom)

				if ( arr_turnup(i) < j ) { ; カード描画
					pos int_x + int_locate_x, int_y + int_locate_y
					suitprint int_suit, int_number, float_zoom
				} else {
					if ( arr_turnup_found(i) < j ) { ; 暴露済み
						; 色を変えるとか？
						pos int_x + int_locate_x, int_y + int_locate_y
						suitprint int_suit, int_number, float_zoom
						gmode 3, , , 85
						pos int_x + int_locate_x, int_y + int_locate_y
						suitprint 1, 14, float_zoom
						gmode 0
					} else { ; 裏返し
						color 153, 0, 0
						boxf int_x + int_locate_x, int_y + int_locate_y, int_x + int_locate_x + int(1.0 * g_font_suit_x * float_zoom), int_y + int_locate_y + int(1.0 * g_font_suit_y * float_zoom)
					}
				}

				; 枠を書く
				pos int_x + int_locate_x, int_y + int_locate_y
				suit_border int_x + int_locate_x, int_y + int_locate_y, int_x_plus, int_y_plus, 0, 0, 0
			}
			j++
		until ( arr_card(i, j) = 0 )
	next

	; ヒントの矢印を表示
	if ( int_hint_from_x >= 0 ) {
		int_x = int(0.5 * ( 2 * int_hint_from_x + 1 ) * g_font_suit_x * float_zoom) + int_locate_x
		int_y = int(0.5 * ( 2 * int_hint_from_y + 1 ) * g_font_suit_y * float_zoom) + int_locate_y
		int_z = int(0.5 * ( 2 * int_hint_to_x   + 1 ) * g_font_suit_x * float_zoom) + int_locate_x
		int_w = int(0.5 * ( 2 * int_hint_to_y   + 1 ) * g_font_suit_y * float_zoom) + int_locate_y
		double_t = atan( int_w - int_y, int_z - int_x ) + g_3pi4
		double_u = atan( int_w - int_y, int_z - int_x ) - g_3pi4
		color 0, 0, 0
		circle int_x - 5, int_y - 5, int_x + 6, int_y + 6, 1
		for i, -1, 3, 1
			for j, -1, 3, 1
				line int_x + i, int_y + j, int_z + i, int_w + j
				line int_z + i, int_w + j, int_z + int( 10.0 * cos(double_t) ) + i, int_w + int( 10.0 * sin(double_t) ) + j
				line int_z + i, int_w + j, int_z + int( 10.0 * cos(double_u) ) + i, int_w + int( 10.0 * sin(double_u) ) + j
			next
		next
		color 255, 0, 0
		if ( int_hint_priority = 1 ) : color 170, 170, 170
		circle int_x - 4, int_y - 4, int_x + 4, int_y + 4, 1
		line int_x, int_y, int_z, int_w
		line int_z, int_w, int_z + int( 10.0 * cos(double_t) ), int_w + int( 10.0 * sin(double_t) )
		line int_z, int_w, int_z + int( 10.0 * cos(double_u) ), int_w + int( 10.0 * sin(double_u) )
	}

	;移動中カードの枠づけ
	if ( int_move_x > -1 ) {
		i = int_move_x
		j = int_move_y
		int_x = int(1.0 * i * g_font_suit_x * float_zoom)
		int_y = int(1.0 * j * g_font_suit_y * float_zoom)
		int_suit = get_suit( arr_card(i, j), int_difficulty )
		int_number = get_number( arr_card(i, j) )

		int_x = int((1.0 * i * g_font_suit_x - g_font_suit_x/8) * float_zoom)
		int_y = int((1.0 * j * g_font_suit_y - g_font_suit_y/8) * float_zoom)

		pos int_x + int_locate_x, int_y + int_locate_y
		f = 1.25*float_zoom
		suitprint int_suit, int_number, f

		int_x_plus = int((1.0 * g_font_suit_x + g_font_suit_x/4) * float_zoom)
		int_y_plus = int((1.0 * g_font_suit_y + g_font_suit_y/4) * float_zoom)
		suit_border int_x + int_locate_x, int_y + int_locate_y, int_x_plus, int_y_plus, 255, 0, 0
	}

	; トレースビューの表示
	if ( global_trace_row > 0 ) {
		color 0, 0, 0
		boxf 0, int_screen_y, g_screen_x, g_screen_y
		for i, 0, global_trace_row, 1
			pos 0, g_screen_y - ((1+global_trace_row-i)*g_font_y)
			fprint arr_strtrace(i), 255
		next
	}

	; ステータスバーの表示
	color 85, 85, 102
	boxf 0, g_screen_y - g_font_y, g_screen_x, g_screen_y

	pos 1*g_screen_x/24 - g_font_x/2, g_screen_y - g_font_y
	fprint "-", 255
	pos 23*g_screen_x/24 - g_font_x/2, g_screen_y - g_font_y
	fprint "+", 255

	if ( int_move_x < 0 ) {
		; カードをつかんでいないとき
		color 255, 255, 255
		for i, 0, 4, 1
			j = 10 * i + 3
			line j * g_screen_x / 36, g_screen_y - g_font_y, j * g_screen_x / 36, g_screen_y
		next

		if ( int_ismoved = 0 ) {
			pos ( 2 * g_screen_x / 9 ) - ( 7 * g_font_x / 2 ), g_screen_y - g_font_y
			fprint "Shuffle", 255
		} else {
			if ( back_length() > 0 ) {
				pos ( 2 * g_screen_x / 9 ) - ( 2 * g_font_x ), g_screen_y - g_font_y
				fprint "Undo", 255
			}
		}

		if ( int_hint_length > 0 ) {
			pos g_screen_x / 2 - ( 2 * g_font_x ), g_screen_y - g_font_y
			fprint "Hint", 255
		}

		if ( int_spider < 5 ) {
			if ( exist_freecell = 0 ) {
				pos ( 7 * g_screen_x / 9 ) - ( 2 * g_font_x ), g_screen_y - g_font_y
				fprint "Deal", 255
			}
		} else {
			pos ( 7 * g_screen_x / 9 ) - ( 7 * g_font_x / 2 ), g_screen_y - g_font_y
			fprint "Give up", 255
		}
	} else {
		; カードをつかんでいないとき
		color 255, 255, 255
		for i, 0, 5, 1
			j = 5 * i + 2
			line j * g_screen_x / 24, g_screen_y - g_font_y, j * g_screen_x / 24, g_screen_y
		next

		for i, 0, 4, 1
			pos ( 10 * i + 9 ) * g_screen_x / 48 - g_font_x, g_screen_y - g_font_y
			c=""
			poke c, 0, 167 + i
			fprint c, 255
		next
	}

	color 255, 255, 255
	line 0, g_screen_y - g_font_y, g_screen_x, g_screen_y - g_font_y

	redraw 1
	await 32

loop

if ( int_max_y = 0 ) {
	str_titl1 = "You Win(^-^)"
} else {
	str_titl1 = "You Lose(T_T)"
}

goto *titl

end

; カードを配布する
*sub_shuffle
	; カードを配布する
	for i, 0, 104, 1
		do
			int_flag = 0
			int_temp = (16 * ( rnd(8) + 1 )) + ( rnd(13) + 1 )
			for j, 0, i, 1
				if ( arr_card(0, j) = int_temp ) {
					int_flag = 1: _break
				}
			next
		until ( int_flag = 0 )
		arr_card(0, i) = int_temp
	next
	
	; 配布したカードを各配列に分配
	for i, 1,  4, 1 :for j, 0,  6, 1 :arr_card(i, j)    = arr_card(0,       6 * i + j) :next :next
	for i, 4, 10, 1 :for j, 0,  5, 1 :arr_card(i, j)    = arr_card(0,  4 +  5 * i + j) :next :next
	for i, 0,  5, 1 :for j, 0, 10, 1 :arr_standby(i, j) = arr_card(0, 54 + 10 * i + j) :next :next
	for i, 6, 104, 1 :arr_card(0, i) = 0 :next
	
	; 見える範囲の設定
	for i, 0,  4, 1 :arr_turnup(i) = 4 :next
	for i, 4, 10, 1 :arr_turnup(i) = 3 :next
	for i, 0, 10, 1 :arr_turnup_found(i) = arr_turnup(i) :next

	return

; 完成したかのチェック
*sub_chk_complete
	if ( chk_complete( arr_card, i, arr_turnup(i), int_difficulty ) = 1 ) {
		k = get_rows( arr_card, i )
		n = get_suit( arr_card( i, k-1 ), int_difficulty ) - 1
		for m, k-1, k-14, -1
			arr_card(i, m) = 0
		next
		; 一枚開ける
		if ( arr_turnup(i) = m ) {
			if ( arr_turnup(i) >= 0 ) :arr_turnup(i)-=1
		}
		; 完成表示
		for o, 0, 8, 1
			if ( arr_finished(o) = "" ) {
				arr_finished(o) = arr_strsuit( n )
				_break
			}
		next
		int_score += 100
		str_trace_put = "Complete (" + i + ")" :gosub *sub_trace_put
		; 戻るの初期化
		back_init
	}

	return

; トレースログ出力
*sub_trace_put
	if ( global_trace_row > 0 ) {
		for i_t, 0, global_trace_row-1, 1
			arr_strtrace(i_t) = arr_strtrace(i_t + 1)
		next
		arr_strtrace(global_trace_row - 1) = str_trace_put
	}
	return

; ヒント配列を生成
*sub_make_hint
	dim arr_hint, 2, 10, 10 ; ヒント格納配列
	int_hint_p = 0        ; ヒントポインタ
	int_hint_from_x = -1  ; ヒント表示領域・元x
	int_hint_from_y = -1  ; ヒント表示領域・元y
	int_hint_to_x   = -1  ; ヒント表示領域・先x
	int_hint_length = 0   ; ヒントの長さ
	int_hint_priority = l ; 優先度・0なら同スート・1なら別スート

	for i, 0, 10, 1
		for j, 0, 10, 1
			if ( i != j ) {
				k = get_rows(arr_card, i) - 1
				l = get_rows(arr_card, j) - 1
				for m, k, -1, -1
					if ( l < 0 ) : _break
					if ( (get_number(arr_card(i, m)) + 1) = get_number(arr_card(j, l)) ) {
						if ( m = 0 ) | ( is_right_order(arr_card, i, m, arr_turnup(i), int_difficulty) = 0 ) {
							int_hint_length++
							if ( get_suit( arr_card(i, m), int_difficulty ) = get_suit( arr_card(j, l), int_difficulty ) ) :n = 0 :else :n = 1
							arr_hint(n, i, j) = m + 1: _break
						}
					}
					if ( is_right_order(arr_card, i, m, arr_turnup(i), int_difficulty) = 0 ) :_break
				next
			}
		next
	next
	return

; クリック情報をリセット、つかんだカート＆ヒント
*sub_init_click_info
	int_move_x = -1
	int_move_y = -1
	int_hint_from_x = -1
	int_hint_from_y = -1
	int_hint_to_x   = -1
	return