#include "hsp3dish.as"

#include "mspd.as"

title "munet spider"

;-------------------------------------------------------------------------------
;
; 最初期設定
;
;-------------------------------------------------------------------------------

*first

celload "font.png", 1               ; 文字画像のロード
celdiv 1, g_font_x, g_font_y, 0, 0  ; 文字画像の分割

celload "fon_suit.png", 2           ; カード画像のロード
celdiv 2, g_font_suit_x, g_font_suit_y, 0, 0 ; 同じく分割

int_mousex = 0
int_mousey = 0
randomize                           ; 乱数初期化

;-------------------------------------------------------------------------------
;
; タイトル
;
;-------------------------------------------------------------------------------

*titl

repeat

	redraw 0

	stick key, 15
	if ( key & 128 ) :end
	if ( key & 256 ) {
		int_mousex = mousex
		int_mousey = mousey
		break
	}

;	pos 0, 0 :fprint "(x, y) = (" + int_mousex + ", " + int_mousey + ")"

	pos 0, int_mousey
	fprint "The quick brown fox"
	pos 0, int_mousey + 32
	fprint "jumps over the lazy dog."

	redraw 1
	await 32

loop

;-------------------------------------------------------------------------------
;
; ゲーム初期設定
;
;-------------------------------------------------------------------------------

*init

; 初期配置 6x4, 5x6 =  54枚
; 配られる 5x10     =  50枚
; 全部で 54 + 50    = 104枚

; 格納データ a & 15 -> 数字   (1〜13)
;            a >> 4 -> スート (1〜 8)

; 配列の初期化
dim arr_card, 10, 104
dim arr_standby, 5, 10
dim arr_turnup, 10

; カードを配布する
for i, 0, 104, 1
	do
		int_flag = 0
		int_temp = (16 * ( rnd(8) + 1 )) + ( rnd(13) + 1 )
		for j, 0, i, 1
			if ( arr_card(0, j) = int_temp ) {
				int_flag = 1: _break
			}
		next
	until ( int_flag = 0 )
	arr_card(0, i) = int_temp
next

; 配布したカードを各配列に分配
for i, 1,  4, 1 :for j, 0,  6, 1 :arr_card(i, j)    = arr_card(0,       6 * i + j) :next :next
for i, 4, 10, 1 :for j, 0,  5, 1 :arr_card(i, j)    = arr_card(0,  4 +  5 * i + j) :next :next
for i, 0,  5, 1 :for j, 0, 10, 1 :arr_standby(i, j) = arr_card(0, 54 + 10 * i + j) :next :next
for i, 6, 104, 1 :arr_card(0, i) = 0 :next

; 見える範囲の設定
for i, 0,  4, 1 :arr_turnup(i) = 4 :next
for i, 4, 10, 1 :arr_turnup(i) = 3 :next


; 拡大率の設定
float_zoom = 0.6

; 難易度の設定
int_difficulty = 1

; 移動セル格納変数
int_move_x = -1
int_move_y = -1

; カードを配った回数
int_spider = 0
; フリーセル存在しますよエラー
int_err_freecell = 0

;-------------------------------------------------------------------------------
;
; ゲーム
;
;-------------------------------------------------------------------------------

*play

repeat

	redraw 0
	;cls

	int_mousex_before = int_mousex
	int_mousey_before = int_mousey
	int_mousex = mousex
	int_mousey = mousey

	stick key, 15
	if ( key & 128 ) {
		if ( int_spider = 5 ) :end
		for i, 0, 10, 1
			j = -1 :do :j++ :until ( arr_card(i, j) = 0 )
			if ( j = 0 ) :int_err_freecell = 50
		next
		if ( int_err_freecell = 0 ) {
			for i, 0, 10, 1
				j = -1 :do :j++ :until ( arr_card(i, j) = 0 )
				arr_card(i, j) = arr_standby( int_spider, i )
			next
			int_spider++
		}
	}

	; セル移動
	if ( key & 256 ) {
		i = int( 1.0 * int_mousex / float_zoom / g_font_suit_x )
		j = int( 1.0 * int_mousey / float_zoom / g_font_suit_y )
		if ( 0 <= i ) & ( i < 10 ) & ( 0 <= j ) & ( j < 104 ) {
			if (( arr_turnup(i) < j ) & ( arr_card(i,j) > 0 )) | ( j = 0 ) {
				if ( int_move_x < 0 ) {
					; セル取得可能判定
					m = 0
					for k, j, 104, 1
						if ( arr_card(i, k+1) = 0 ) {
							_break
						}
						a = arr_card(i, k) & 15
						b = (arr_card(i, k+1)&15)+1
						if ( a != b ) {
							m = 1
							_break
						}
					next
					
					if ( m=0 ) {
						; セル取得
						int_move_x = i
						int_move_y = j
					} else {
						int_move_x = -1
						int_move_y = -1
					}
				} else {
					if ( i != int_move_x ) {
						a = arr_card(int_move_x, int_move_y) & 15
						b = (arr_card(i, j)&15)-1
						if ( a = b ) | (( j = 0 ) & ( arr_card(i, j) = 0 )) {
							; セル移動完了
							l = j
							if (( j = 0 ) & ( arr_card(i, j) = 0 )) :l--
							for k, int_move_y, 104, 1
								l++
								arr_card(i, l) = arr_card(int_move_x, k)
								arr_card(int_move_x, k) = 0
								if ( arr_card(int_move_x, k+1) = 0 ) :_break
							next

							; 完成チェック
							a = arr_card(i, l) & 15
							if ( a = 1 ) {
								for k, l, 0, -1

									int_suit = ( arr_card(i, k-1) >> 4 ) \ int_difficulty
									if ( int_suit = 0 ) :int_suit = int_difficulty
									int_number = arr_card(i, k-1) & 15
									a = int_suit * 16 + int_number

									int_suit = ( arr_card(i, k) >> 4 ) \ int_difficulty
									if ( int_suit = 0 ) :int_suit = int_difficulty
									int_number = arr_card(i, k) & 15
									b = int_suit * 16 + int_number

									if ( a != (b+1) ) :_break
									if ( (a & 15) = 13 ) {
										for m, k-1, 104, 1
											arr_card(i, m) = 0
											if ( arr_card(i, m+1) = 0 ) :_break
										next
										; 一枚開ける
										if ( arr_turnup(i) = (k-2) ) {
											if ( arr_turnup(i) >= 0 ) :arr_turnup(i)-=1
										}
										_break
									}
								next
							}
							; 一枚開ける
							if ( arr_turnup(int_move_x) = (int_move_y-1) ) {
								if ( arr_turnup(int_move_x) >= 0 ) :arr_turnup(int_move_x)-=1
							}
						}
					}
					int_move_x = -1
					int_move_y = -1
				}
			} else {
				int_move_x = -1
				int_move_y = -1
			}
		} else {
			int_move_x = -1
			int_move_y = -1
		}
	}

	; ズーム
	getkey gky, 2
	if ( gky = 1 ) {
		if (( int_mousey_before - int_mousey ) > 1 ) {
			float_zoom = double(int(92.0 * float_zoom)) / 100.0
			if float_zoom < 0.5 :float_zoom = 0.5
		}
		if (( int_mousey_before - int_mousey ) < -1 ) {
			float_zoom = double(int(108.0 * float_zoom)) / 100.0
			if float_zoom > 2.0 :float_zoom = 2.0
		}
	}

	; 場の表示
	for i, 0, 10, 1
		j = 0
		do
			; 情報取得
			if ( arr_card(i, j) > 0 ) {
				int_suit = ( arr_card(i, j) >> 4 ) \ int_difficulty
				if ( int_suit = 0 ) :int_suit = int_difficulty
				int_number = arr_card(i, j) & 15

				; 絵を書く
				int_x = int(1.0 * i * g_font_suit_x * float_zoom)
				int_y = int(1.0 * j * g_font_suit_y * float_zoom)
				if ( arr_turnup(i) < j ) { ; カード描画
					pos int_x, int_y
					suitprint int_suit, int_number, float_zoom
				} else { ; 裏返し
					color 153, 0, 0
					boxf int_x, int_y, int_x + int(1.0 * g_font_suit_x * float_zoom), int_y + int(1.0 * g_font_suit_y * float_zoom)
				}

				; 枠を書く
				pos int_x, int_y
				int_x_plus = int(1.0 * g_font_suit_x * float_zoom)
				int_y_plus = int(1.0 * g_font_suit_y * float_zoom)
				suitborder int_x, int_y, int_x_plus, int_y_plus, 0, 0, 0
			}
			j++
		until ( arr_card(i, j) = 0 )
	next

	;hover・移動の枠づけ
	if ( int_move_x > -1 ) {
		i = int_move_x
		j = int_move_y
		int_x = int(1.0 * i * g_font_suit_x * float_zoom)
		int_y = int(1.0 * j * g_font_suit_y * float_zoom)
		int_suit = ( arr_card(i, j) >> 4 ) \ int_difficulty
		if ( int_suit = 0 ) :int_suit = int_difficulty
		int_number = arr_card(i, j) & 15

		int_x = int((1.0 * i * g_font_suit_x - g_font_suit_x/8) * float_zoom)
		int_y = int((1.0 * j * g_font_suit_y - g_font_suit_y/8) * float_zoom)

		pos int_x, int_y
		f = 1.25*float_zoom
		suitprint int_suit, int_number, f

		int_x_plus = int((1.0 * g_font_suit_x + g_font_suit_x/4) * float_zoom)
		int_y_plus = int((1.0 * g_font_suit_y + g_font_suit_y/4) * float_zoom)
		suitborder int_x, int_y, int_x_plus, int_y_plus, 255, 255, 0
	}

	i = int( 1.0 * int_mousex / float_zoom / g_font_suit_x )
	j = int( 1.0 * int_mousey / float_zoom / g_font_suit_y )
	if ( 0 <= i ) & ( i < 10 ) & ( 0 <= j ) & ( j < 104 ) {
		if ( arr_turnup(i) < j ) & ( arr_card(i,j) > 0 ) {
			int_x = int((1.0 * i * g_font_suit_x - g_font_suit_x/4) * float_zoom)
			int_y = int((1.0 * j * g_font_suit_y - g_font_suit_y/4) * float_zoom)

			int_suit = ( arr_card(i, j) >> 4 ) \ int_difficulty
			if ( int_suit = 0 ) :int_suit = int_difficulty
			int_number = arr_card(i, j) & 15

			pos int_x, int_y
			f = 1.5*float_zoom
			suitprint int_suit, int_number, f

			int_x_plus = int((1.0 * g_font_suit_x + g_font_suit_x/2) * float_zoom)
			int_y_plus = int((1.0 * g_font_suit_y + g_font_suit_y/2) * float_zoom)
			suitborder int_x, int_y, int_x_plus, int_y_plus, 255, 0, 0
		}
	}

	pos 0, 480 - g_font_y
	i = 5 - int_spider
	if ( int_err_freecell > 0 ) {
		fprint "Freecell Exists!"
		int_err_freecell--
	} else {
		fprint "Stack : " + i
	}

	redraw 1
	await 32

loop



end
